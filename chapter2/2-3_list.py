# 리스트 자료형
odd = [1, 3, 5, 7, 9]
print(type(odd))
# 출력 결과물
# <class 'list'>
print("=" * 25 + " 구분선 " + "=" * 25)

# 파이썬은 다른 자료형도 리스트에 다 담을 수 있음
# 메모리나 속도면에선 비효율적
a = []
b = [1, 2, 3]
c = ['Life', 'is', 'too', 'short']
d = [1, 2, 'Life', 'is']
e = [1, 2, ['Life', 'is']]


# 리스트의 인덱싱과 슬라이싱
a = [1, 2, 3]
print(a)
print(a[1] + a[2])
print("=" * 25 + " 구분선 " + "=" * 25)

# a[-1]은 문자열에서와 마찬가지로 리스트 a의 마지막 요솟값
print(a[-1])
print("=" * 25 + " 구분선 " + "=" * 25)

# 리스트 안에 리스트
a = [1, 2, 3, ['a', 'b', 'c']]
print(a[3])
print(a[3][1])
print(a[-1][2])

# print(a[1][0])  # 오류
a = [1, "hello", 3, ['a', 'b', 'c']]
print(a[1][0])  # 이거는 hello가 문자열이기때문에 가능
print("=" * 25 + " 구분선 " + "=" * 25)


# 삼중 리스트 - 복잡해서 잘 안씀
a = [1, 2, ['a', 'b', ['Life', 'is']]]
print(a[2][2][0])
print("=" * 25 + " 구분선 " + "=" * 25)


# 리스트의 슬라이싱 - 문자열과 같음
a = [1, 2, 3, 4, 5]
print(a[0:2])
print(a[0::2])
print("=" * 25 + " 구분선 " + "=" * 25)

# 아래 같음 - 연습
a = [1, 2, 3, 4, 5]
b = a[:2]
c = a[2:]
print(b)
print(c)
print("=" * 25 + " 구분선 " + "=" * 25)

# 중첩된 리스트에서 슬라이싱
a = [1, 2, 3, ['a', 'b', 'c'], 4, 5]
print(a[2:5])
print(a[3][:2])
print("=" * 25 + " 구분선 " + "=" * 25)

# 리스트 연산하기 - 문자열과 같음
a = [1, 2, 3]
b = [4, 5, 6]
print(a+b)
print(a * 3)
print("=" * 25 + " 구분선 " + "=" * 25)

# 리스트 길이 구하기 - 문자열과 같음
a = [1, 2, 3]
print(len(a))
print("=" * 25 + " 구분선 " + "=" * 25)

# 참고
# string 문자열 (문자 + 리스트(배열))
# char 문자


# 초보자가 범하기 쉬운 리스트 연산 오류
a = [1, 2, 3]
# print(a[2] + "hi")  # 오류 - 'int' and 'str' 자료형이 달라서 더하기 불가능
print(str(3) + "hi")  # 자료형을 같게 해준 후 곱해야 함
print("hi" * 3)  # 이건 "hi"를 세 번 반복의 의미임
print("=" * 25 + " 구분선 " + "=" * 25)


# 리스트의 수정과 삭제
a = [1, 2, 3]
a[2] = 4
print(a)
print("=" * 25 + " 구분선 " + "=" * 25)
# del 객체 - 객체란 파이썬에서 사용되는 모든 자료형
# del 함수를 사용해 리스트 요소 삭제하기
a = [1, 2, 3]
del a[1]
print(a)
print("=" * 25 + " 구분선 " + "=" * 25)
# 참고
# 리스트를 작성할 때 [1, 2, 3] 여기서 공백은 표기법이지, 어떤 값이 아님. [1,2,3] 이나 [1, 2, 3] 이나 출력할 때 다 [1, 2, 3]으로 출력 됨

a = [1, 2, 3, 4, 5]
del a[2:]
print(a)
print("=" * 25 + " 구분선 " + "=" * 25)
